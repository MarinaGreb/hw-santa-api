{
	"info": {
		"_postman_id": "6793a2df-065d-4913-8c83-e34451d50f35",
		"name": "Secret santa Copy",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_uid": "13712655-6793a2df-065d-4913-8c83-e34451d50f35"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "1920c705-7274-431e-bc92-578490ff144e",
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that username equals Марина\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"Марина123\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "305ff39c-867d-4dcb-8e7e-51bfd6e9bf15",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{test_email}}\",\r\n    \"password\": \"{{test_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login?redirect=%2F",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login with invalid email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that error message is USER_NOT_FOUND\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"USER_NOT_FOUND\");\r",
							"});"
						],
						"type": "text/javascript",
						"id": "be104f4a-c5ad-4e19-bb1f-9eeab1c3d920"
					}
				}
			],
			"id": "aef5d14c-78f5-4027-b39b-d97dad67efc8",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"M{{test_email}}\",\r\n    \"password\": \"{{test_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login?redirect=%2F",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login with wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that error message is INVALID_USERNAME_OR_PASSWORD\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"INVALID_USERNAME_OR_PASSWORD\");\r",
							"});"
						],
						"type": "text/javascript",
						"id": "cf5cb138-f4f4-4beb-9e70-e533c8403b6d"
					}
				}
			],
			"id": "d1f54461-d8bc-4de8-9cac-f64bc45b4de1",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{test_email}}\",\r\n    \"password\": \"{{test_password}}7\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login?redirect=%2F",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "profile page opening",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the response body contains an email\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"test_email\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the response body contains the username\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Марина\");\r",
							"});"
						],
						"type": "text/javascript",
						"id": "f6887b68-e0c2-440b-b084-ae7b981afcc9"
					}
				}
			],
			"id": "397f5448-1cd8-4ffc-b49a-0aec1c22fd77",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/account",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check that email is user email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"test_email\"));\r",
							"});"
						],
						"type": "text/javascript",
						"id": "d4854641-79f9-4aa8-b87e-eee469a3d079"
					}
				}
			],
			"id": "b94bcac4-908f-4ced-aa00-2a0179335fdd",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{test_password}}123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "login with new password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that username equals Марина\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"Марина\");\r",
							"});"
						],
						"type": "text/javascript",
						"id": "41880810-3287-49b1-8c93-69ddf336b66d"
					}
				}
			],
			"id": "be9e8b25-5002-4aa2-b579-a6448358fa5a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{test_email}}\",\r\n    \"password\": \"{{test_password}}123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login?redirect=%2F",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change password from file",
			"event": [
				{
					"listen": "test",
					"script": {
						"id": "3865fed8-0125-45c7-977d-d397057f883c",
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"id": "ed79d1db-b7d7-4fd9-a6e3-7547a91f3e16",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{passwordFromFile}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password from file2 (invalid))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check that error message is validations.invalid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"validations.invalid\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "50bbba91-1e31-4a43-8aed-efff790e238e"
					}
				}
			],
			"id": "cff6f843-dc18-4a3f-95d2-eb141e73816a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{passwordInvalidFromFile}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password to old password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check that the email is the same as the user's\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"test_email\"));\r",
							"});"
						],
						"type": "text/javascript",
						"id": "272ea69d-97f8-4b05-9a6e-2a2d8a951b47"
					}
				}
			],
			"id": "77c43486-0420-4647-8ef8-41df2b5bee9a",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{test_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password to short",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check that error message is validations.invalid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"validations.invalid\");\r",
							"});\r",
							"pm.test(\"Check that the error is on the length of the password\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.errors[0].transKey).to.eql(\"validations.minCharLength\");\r",
							"});"
						],
						"type": "text/javascript",
						"id": "6a238929-7fd0-4407-b5eb-2a075c9d4003"
					}
				}
			],
			"id": "78283263-8e74-45bd-9a2e-cec3e2d5af35",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password to long",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check that error message is validations.invalid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"validations.invalid\");\r",
							"});\r",
							"pm.test(\"Check that the error is on the length of the password\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.errors[0].transKey).to.eql(\"validations.maxCharLength\");\r",
							"});"
						],
						"type": "text/javascript",
						"id": "f976860f-931b-4234-94bc-8d763e8b7c99"
					}
				}
			],
			"id": "8f3b2641-f3f0-4a2d-b9b6-bbccb9b53105",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"123456789123456789123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password to old password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check that the email is the same as the user's\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"test_email\"));\r",
							"});"
						],
						"type": "text/javascript",
						"id": "197fae28-335a-41b8-b639-61699bb507d2"
					}
				}
			],
			"id": "13965d93-9c76-4176-8fe5-1ab029b18541",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{test_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "сreate box",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"pm.collectionVariables.set(\"key\", response.box.key); //создание динамической переменной Key\r",
							"\r",
							"//Проверка что есть возможность добавить карточки \r",
							"pm.test(\"Check that it is possible to add cards\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.canCreateCards).to.be.true;\r",
							"});\r",
							"// pm.collectionVariables.set(\"boxName\", response.box.name); //создание динамической переменной boxName\r",
							"// pm.collectionVariables.set(\"picture\", response.box.picture); //создание динамической переменной picture\r",
							"// pm.collectionVariables.set(\"inviteKey\", response.box.inviteKey); //создание динамической переменной inviteKey"
						],
						"type": "text/javascript",
						"id": "8b2bceaf-92b2-4d6d-9588-87aaee4ae949"
					}
				}
			],
			"id": "6d7b1f72-7a63-4b0f-9348-6d8cc17a517c",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"{{$randomProduct}}\",\r\n    \"key\": \"{{$randomPassword}}\",\r\n    \"picture\": null,\r\n    \"usePost\": false,\r\n    \"useCashLimit\": null,\r\n    \"cashLimit\": null,\r\n    \"cashLimitCurrency\": null,\r\n    \"useWish\": true,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": true,\r\n    \"isPhoneRequired\": false,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete box",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//const response = pm.response.json();\r",
							"\r",
							"// pm.collectionVariables.set(\"boxName\", response.box.name); //создание динамической переменной boxName\r",
							"// pm.collectionVariables.set(\"picture\", response.box.picture); //создание динамической переменной picture\r",
							"// pm.collectionVariables.set(\"inviteKey\", response.box.inviteKey); //создание динамической переменной inviteKey"
						],
						"type": "text/javascript",
						"id": "b9e19151-e067-4297-898e-e5d465f672e4"
					}
				}
			],
			"id": "0c212740-9242-4d56-8871-58e846102620",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box/{{key}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box",
						"{{key}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "creating boxes with invalid data from file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\",() => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "26c69f06-c22a-4e76-b90b-89abc7ec1e67"
					}
				}
			],
			"id": "d8cc62c1-02c8-4b91-ab16-fb283424620e",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"{{boxNameF}}\",\r\n    \"key\": \"{{keyF}}\",\r\n    \"picture\": \"null\",\r\n    \"usePost\": {{usePost}},\r\n    \"useCashLimit\": {{useCashLimit}},\r\n    \"cashLimit\": {{cashLimit}},\r\n    \"cashLimitCurrency\": \"{{cashLimitCurrency}}\",\r\n    \"useWish\": {{useWish}},\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": {{useNames}},\r\n    \"isPhoneRequired\": {{isPhoneRequired}},\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "creating box with all fields filled in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Проверка, что создана коробока с именем Test1 \r",
							"pm.test(\"Check that name is Test1\", () => {\r",
							"    pm.expect(jsonData.box.name).to.be.eql(\"Test1\");\r",
							"});\r",
							"\r",
							"//Проверка, что создана коробока с ключём 123 \r",
							"pm.test(\"Check that key is 123\", () => {\r",
							"    pm.expect(jsonData.box.key).to.be.eql(\"123\");\r",
							"});"
						],
						"type": "text/javascript",
						"id": "c1de7b4e-ffca-408e-9b91-6db2ecd7ce84"
					}
				}
			],
			"id": "118f2462-d6fa-4d2c-a721-fc5d2951df14",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"Test1\",\r\n    \"key\": \"123\",\r\n    \"picture\": \"cup_one\",\r\n    \"usePost\": true,\r\n    \"useCashLimit\": true,\r\n    \"cashLimit\": 100,\r\n    \"cashLimitCurrency\": \"usd\",\r\n    \"useWish\": true,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": true,\r\n    \"isPhoneRequired\": true,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "creating box with with existing key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//const response = pm.response.json();\r",
							"\r",
							"// pm.collectionVariables.set(\"boxName\", response.box.name); //создание динамической переменной boxName\r",
							"// pm.collectionVariables.set(\"picture\", response.box.picture); //создание динамической переменной picture\r",
							"// pm.collectionVariables.set(\"inviteKey\", response.box.inviteKey); //создание динамической переменной inviteKey\r",
							"const response = pm.response.json();\r",
							"pm.collectionVariables.set(\"key\", response.box.key); //создание динамической переменной Key"
						],
						"type": "text/javascript",
						"id": "8cfac9bf-4a25-481c-9d31-4446eb422994"
					}
				}
			],
			"id": "18b8cb87-b064-411e-ad86-5ec2a64a4779",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"Test2\",\r\n    \"key\": \"123\",\r\n    \"picture\": null,\r\n    \"usePost\": true,\r\n    \"useCashLimit\": true,\r\n    \"cashLimit\": 500,\r\n    \"cashLimitCurrency\": \"euro\",\r\n    \"useWish\": true,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": true,\r\n    \"isPhoneRequired\": true,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all available boxes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json()\r",
							"var allAvailableBox = []\r",
							"var countOfBox = 0;\r",
							"\r",
							"response.forEach((box) => {\r",
							"    allAvailableBox.push(box.box.key);\r",
							"    countOfBox++;\r",
							"});\r",
							"console.log(allAvailableBox)\r",
							"console.log(countOfBox)//вывод количества коробок до удаления\r",
							"\r",
							"//Проверка, что не сущесвтует коробка с имененем Test1\r",
							"const response2 = pm.response.text()\r",
							"pm.test(\"Check that no box with Test1 name\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Test1\");\r",
							"});\r",
							"//Проверка, что существует коробка с имененем Test2\r",
							"pm.test(\"Check that no box with Test1 name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Test2\");\r",
							"});\r",
							""
						],
						"type": "text/javascript",
						"id": "c8c5be4a-3d96-4175-b274-12d48e119cdb"
					}
				}
			],
			"id": "63d2213d-6b6c-4931-905c-ba0a944ffda4",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/account/boxes",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"boxes"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete box 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"id": "2988a7d8-0a34-4f73-9e7c-5f694fc65392"
					}
				}
			],
			"id": "c1df03b2-2575-4a28-bb0a-67175ca898a3",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box/{{key}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box",
						"{{key}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all available boxes Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json()\r",
							"var allAvailableBox = []\r",
							"var countOfBox = 0;\r",
							"\r",
							"response.forEach((box) => {\r",
							"    allAvailableBox.push(box.box.key);\r",
							"    countOfBox++;\r",
							"});\r",
							"console.log(allAvailableBox)\r",
							"console.log(countOfBox)//вывод количества коробок до удаления"
						],
						"type": "text/javascript",
						"id": "c9dbce3a-e17c-4f61-9c68-7811aadd5748"
					}
				}
			],
			"id": "8a11f6df-5d6a-417d-a21e-ffc925f83850",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/account/boxes",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"boxes"
					]
				}
			},
			"response": []
		},
		{
			"name": "creating box with with max. amount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"key\", response.box.key); //создание динамической переменной Key\r",
							"pm.collectionVariables.set(\"boxName\", response.box.name); //создание динамической переменной boxName\r",
							"pm.collectionVariables.set(\"inviteKey\", response.box.inviteKey); //создание динамической переменной inviteKey\r",
							"pm.collectionVariables.set(\"picture\", response.box.picture); //создание динамической переменной inviteKey\r",
							""
						],
						"type": "text/javascript",
						"id": "29a75303-200c-49b9-93e3-4e123ae328c5"
					}
				}
			],
			"id": "9c10153f-72d4-4997-8707-e013022f5d1b",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"{{$randomProduct}}\",\r\n    \"key\": \"{{$randomPassword}}\",\r\n    \"picture\": null,\r\n    \"usePost\": false,\r\n    \"useCashLimit\": true,\r\n    \"cashLimit\": 999999,\r\n    \"cashLimitCurrency\": \"uah\",\r\n    \"useWish\": true,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": true,\r\n    \"isPhoneRequired\": false,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "changing box settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Проверка, что работаем с той же коробкой\r",
							"var inviteKey2 = pm.collectionVariables.get(\"inviteKey\");\r",
							"pm.test(\"Check that it's the same box\", () => {\r",
							"    pm.expect(jsonData.box.inviteKey).to.be.eql(inviteKey2);\r",
							"});\r",
							"//Проверка, что имя коробоки изменено \r",
							"var boxName2 = pm.collectionVariables.get(\"boxName\");\r",
							"pm.test(\"Check that boxName has been changed\", () => {\r",
							"    pm.expect(jsonData.box.name).to.be.eql(boxName2 + \"Test\");\r",
							"});\r",
							"\r",
							"//Проверка, что лимит изменен\r",
							"pm.test(\"Check that limit has been changed\", () => {\r",
							"    pm.expect(jsonData.box.cashLimit).to.be.eql(1);\r",
							"});\r",
							"\r",
							"//Проверка, что валюта изменена\r",
							"pm.test(\"Check that currency has been changed\", () => {\r",
							"    pm.expect(jsonData.box.cashLimitCurrency).to.be.eql(\"kzt\");\r",
							"});\r",
							"\r",
							"//Проверка, что все доп настройки изменены\r",
							"pm.test(\"Changed useWish\", () => {\r",
							"    pm.expect(jsonData.box.useWish).to.be.eql(false);\r",
							"});\r",
							"pm.test(\"Changed useNames\", () => {\r",
							"    pm.expect(jsonData.box.useNames).to.be.eql(false);\r",
							"});\r",
							"pm.test(\"Changed isPhoneRequired\", () => {\r",
							"    pm.expect(jsonData.box.isPhoneRequired).to.be.eql(true);\r",
							"});\r",
							"pm.test(\"Changed usePost\", () => {\r",
							"    pm.expect(jsonData.box.usePost).to.be.eql(true);\r",
							"});"
						],
						"type": "text/javascript",
						"id": "0fe64155-4c07-4324-af4e-0128d681c94a"
					}
				}
			],
			"id": "66f1ce44-b3d3-4924-aca0-adaecc8c486f",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"{{boxName}}Test\",\r\n    \"key\": \"{{key}}\",\r\n    \"picture\": \"{{picture}}\",\r\n    \"usePost\": true,\r\n    \"useCashLimit\": true,\r\n    \"cashLimit\": 1,\r\n    \"cashLimitCurrency\": \"kzt\",\r\n    \"useWish\": false,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": false,\r\n    \"isPhoneRequired\": true,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete box 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript",
						"id": "ca621886-ea56-4dd3-86e8-ae5f005f3d79"
					}
				}
			],
			"id": "3a854e6e-09a6-4b8c-95bc-519396cad895",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box/{{key}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box",
						"{{key}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "6e015e47-7917-4f71-84f8-f88758ce0a3f"
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				],
				"id": "45e71002-948b-4f73-904c-b8ca02058423"
			}
		}
	],
	"variable": [
		{
			"id": "d68e4748-6851-471b-a4bc-09e9ee28762c",
			"key": "key",
			"value": ""
		},
		{
			"id": "e4bd1200-2f8c-4d1a-89fe-1dc7a0da35fb",
			"key": "inviteKey",
			"value": ""
		},
		{
			"id": "5155d678-5d6c-46c7-8edd-e5e8c0f12e0e",
			"key": "picture",
			"value": ""
		},
		{
			"id": "605e8197-e260-41ba-864a-02c73e0506f3",
			"key": "boxName",
			"value": ""
		},
		{
			"id": "420b8a43-872f-4353-819f-64c37e0955d1",
			"key": "allAvailableBox",
			"value": ""
		},
		{
			"id": "5877c9d5-8723-4bc3-b27b-c72ade46b1de",
			"key": "boxName1",
			"value": ""
		}
	]
}