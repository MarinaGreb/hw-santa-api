{
	"info": {
		"_postman_id": "4f657da6-cecf-4cdc-9c73-27a825f0d435",
		"name": "Secret santa",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "13712655"
	},
	"item": [
		{
			"name": "login",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that username equals Марина\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"Марина\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{test_email}}\",\r\n    \"password\": \"{{test_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login?redirect=%2F",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login with invalid email",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 404\", function () {\r",
							"    pm.response.to.have.status(404);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that error message is USER_NOT_FOUND\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"USER_NOT_FOUND\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"M{{test_email}}\",\r\n    \"password\": \"{{test_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login?redirect=%2F",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "login with wrong password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that error message is INVALID_USERNAME_OR_PASSWORD\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"INVALID_USERNAME_OR_PASSWORD\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{test_email}}\",\r\n    \"password\": \"{{test_password}}7\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login?redirect=%2F",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "profile page opening",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the response body contains an email\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(pm.variables.get(\"test_email\"));\r",
							"});\r",
							"\r",
							"pm.test(\"Check that the response body contains the username\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Марина\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/account",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check that email is user email\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"test_email\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{test_password}}123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "login with new password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Check that username equals Марина\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.username).to.eql(\"Марина\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": \"{{test_email}}\",\r\n    \"password\": \"{{test_password}}123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/login?redirect=%2F",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"login"
					],
					"query": [
						{
							"key": "redirect",
							"value": "%2F"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "change password from file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{passwordFromFile}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password from file2 (invalid))",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check that error message is validations.invalid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"validations.invalid\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{passwordInvalidFromFile}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password to old password",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check that the email is the same as the user's\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"test_email\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{test_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password to short",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check that error message is validations.invalid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"validations.invalid\");\r",
							"});\r",
							"pm.test(\"Check that the error is on the length of the password\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.errors[0].transKey).to.eql(\"validations.minCharLength\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"12345\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password to long",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 400\", function () {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							"pm.test(\"Check that error message is validations.invalid\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.message).to.eql(\"validations.invalid\");\r",
							"});\r",
							"pm.test(\"Check that the error is on the length of the password\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.error.errors[0].transKey).to.eql(\"validations.maxCharLength\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"123456789123456789123\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "change password to old password Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Check that the status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"pm.test(\"Check that the email is the same as the user's\", function () {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.email).to.eql(pm.variables.get(\"test_email\"));\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"password\": \"{{test_password}}\"\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/account/password",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"password"
					]
				}
			},
			"response": []
		},
		{
			"name": "сreate box",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"pm.collectionVariables.set(\"key\", response.box.key); //создание динамической переменной Key\r",
							"\r",
							"//Проверка что есть возможность добавить карточки \r",
							"pm.test(\"Check that it is possible to add cards\", () => {\r",
							"    var jsonData = pm.response.json();\r",
							"    pm.expect(jsonData.canCreateCards).to.be.true;\r",
							"});\r",
							"// pm.collectionVariables.set(\"boxName\", response.box.name); //создание динамической переменной boxName\r",
							"// pm.collectionVariables.set(\"picture\", response.box.picture); //создание динамической переменной picture\r",
							"// pm.collectionVariables.set(\"inviteKey\", response.box.inviteKey); //создание динамической переменной inviteKey"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"{{$randomProduct}}\",\r\n    \"key\": \"{{$randomPassword}}\",\r\n    \"picture\": null,\r\n    \"usePost\": false,\r\n    \"useCashLimit\": null,\r\n    \"cashLimit\": null,\r\n    \"cashLimitCurrency\": null,\r\n    \"useWish\": true,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": true,\r\n    \"isPhoneRequired\": false,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete box",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//const response = pm.response.json();\r",
							"\r",
							"// pm.collectionVariables.set(\"boxName\", response.box.name); //создание динамической переменной boxName\r",
							"// pm.collectionVariables.set(\"picture\", response.box.picture); //создание динамической переменной picture\r",
							"// pm.collectionVariables.set(\"inviteKey\", response.box.inviteKey); //создание динамической переменной inviteKey"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box/{{key}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box",
						"{{key}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "creating boxes with invalid data from file",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\",() => {\r",
							"    pm.response.to.have.status(400);\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"{{boxNameF}}\",\r\n    \"key\": \"{{keyF}}\",\r\n    \"picture\": \"null\",\r\n    \"usePost\": {{usePost}},\r\n    \"useCashLimit\": {{useCashLimit}},\r\n    \"cashLimit\": {{cashLimit}},\r\n    \"cashLimitCurrency\": \"{{cashLimitCurrency}}\",\r\n    \"useWish\": {{useWish}},\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": {{useNames}},\r\n    \"isPhoneRequired\": {{isPhoneRequired}},\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "creating box with all fields filled in",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Проверка, что создана коробока с именем Test1 \r",
							"pm.test(\"Check that name is Test1\", () => {\r",
							"    pm.expect(jsonData.box.name).to.be.eql(\"Test1\");\r",
							"});\r",
							"\r",
							"//Проверка, что создана коробока с ключём 123 \r",
							"pm.test(\"Check that key is 123\", () => {\r",
							"    pm.expect(jsonData.box.key).to.be.eql(\"123\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"Test1\",\r\n    \"key\": \"123\",\r\n    \"picture\": \"cup_one\",\r\n    \"usePost\": true,\r\n    \"useCashLimit\": true,\r\n    \"cashLimit\": 100,\r\n    \"cashLimitCurrency\": \"usd\",\r\n    \"useWish\": true,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": true,\r\n    \"isPhoneRequired\": true,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "creating box with with existing key",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"//const response = pm.response.json();\r",
							"\r",
							"// pm.collectionVariables.set(\"boxName\", response.box.name); //создание динамической переменной boxName\r",
							"// pm.collectionVariables.set(\"picture\", response.box.picture); //создание динамической переменной picture\r",
							"// pm.collectionVariables.set(\"inviteKey\", response.box.inviteKey); //создание динамической переменной inviteKey\r",
							"const response = pm.response.json();\r",
							"pm.collectionVariables.set(\"key\", response.box.key); //создание динамической переменной Key"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"Test2\",\r\n    \"key\": \"123\",\r\n    \"picture\": null,\r\n    \"usePost\": true,\r\n    \"useCashLimit\": true,\r\n    \"cashLimit\": 500,\r\n    \"cashLimitCurrency\": \"euro\",\r\n    \"useWish\": true,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": true,\r\n    \"isPhoneRequired\": true,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all available boxes",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", () => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json()\r",
							"var allAvailableBox = []\r",
							"var countOfBox = 0;\r",
							"\r",
							"response.forEach((box) => {\r",
							"    allAvailableBox.push(box.box.key);\r",
							"    countOfBox++;\r",
							"});\r",
							"console.log(allAvailableBox)\r",
							"console.log(countOfBox)//вывод количества коробок до удаления\r",
							"\r",
							"//Проверка, что не сущесвтует коробка с имененем Test1\r",
							"const response2 = pm.response.text()\r",
							"pm.test(\"Check that no box with Test1 name\", function () {\r",
							"    pm.expect(pm.response.text()).to.not.include(\"Test1\");\r",
							"});\r",
							"//Проверка, что существует коробка с имененем Test2\r",
							"pm.test(\"Check that no box with Test1 name\", function () {\r",
							"    pm.expect(pm.response.text()).to.include(\"Test2\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/account/boxes",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"boxes"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete box 2",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box/{{key}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box",
						"{{key}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "get all available boxes Copy",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"const response = pm.response.json()\r",
							"var allAvailableBox = []\r",
							"var countOfBox = 0;\r",
							"\r",
							"response.forEach((box) => {\r",
							"    allAvailableBox.push(box.box.key);\r",
							"    countOfBox++;\r",
							"});\r",
							"console.log(allAvailableBox)\r",
							"console.log(countOfBox)//вывод количества коробок до удаления"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{url}}/api/account/boxes",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"account",
						"boxes"
					]
				}
			},
			"response": []
		},
		{
			"name": "creating box with with max. amount",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"const response = pm.response.json();\r",
							"\r",
							"pm.collectionVariables.set(\"key\", response.box.key); //создание динамической переменной Key\r",
							"pm.collectionVariables.set(\"boxName\", response.box.name); //создание динамической переменной boxName\r",
							"pm.collectionVariables.set(\"inviteKey\", response.box.inviteKey); //создание динамической переменной inviteKey\r",
							"pm.collectionVariables.set(\"picture\", response.box.picture); //создание динамической переменной inviteKey\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"{{$randomProduct}}\",\r\n    \"key\": \"{{$randomPassword}}\",\r\n    \"picture\": null,\r\n    \"usePost\": false,\r\n    \"useCashLimit\": true,\r\n    \"cashLimit\": 999999,\r\n    \"cashLimitCurrency\": \"uah\",\r\n    \"useWish\": true,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": true,\r\n    \"isPhoneRequired\": false,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "changing box settings",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"var jsonData = pm.response.json();\r",
							"\r",
							"//Проверка, что работаем с той же коробкой\r",
							"var inviteKey2 = pm.collectionVariables.get(\"inviteKey\");\r",
							"pm.test(\"Check that it's the same box\", () => {\r",
							"    pm.expect(jsonData.box.inviteKey).to.be.eql(inviteKey2);\r",
							"});\r",
							"//Проверка, что имя коробоки изменено \r",
							"var boxName2 = pm.collectionVariables.get(\"boxName\");\r",
							"pm.test(\"Check that boxName has been changed\", () => {\r",
							"    pm.expect(jsonData.box.name).to.be.eql(boxName2 + \"Test\");\r",
							"});\r",
							"\r",
							"//Проверка, что лимит изменен\r",
							"pm.test(\"Check that limit has been changed\", () => {\r",
							"    pm.expect(jsonData.box.cashLimit).to.be.eql(1);\r",
							"});\r",
							"\r",
							"//Проверка, что валюта изменена\r",
							"pm.test(\"Check that currency has been changed\", () => {\r",
							"    pm.expect(jsonData.box.cashLimitCurrency).to.be.eql(\"kzt\");\r",
							"});\r",
							"\r",
							"//Проверка, что все доп настройки изменены\r",
							"pm.test(\"Changed useWish\", () => {\r",
							"    pm.expect(jsonData.box.useWish).to.be.eql(false);\r",
							"});\r",
							"pm.test(\"Changed useNames\", () => {\r",
							"    pm.expect(jsonData.box.useNames).to.be.eql(false);\r",
							"});\r",
							"pm.test(\"Changed isPhoneRequired\", () => {\r",
							"    pm.expect(jsonData.box.isPhoneRequired).to.be.eql(true);\r",
							"});\r",
							"pm.test(\"Changed usePost\", () => {\r",
							"    pm.expect(jsonData.box.usePost).to.be.eql(true);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PUT",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\r\n    \"email\": null,\r\n    \"name\": \"{{boxName}}Test\",\r\n    \"key\": \"{{key}}\",\r\n    \"picture\": \"{{picture}}\",\r\n    \"usePost\": true,\r\n    \"useCashLimit\": true,\r\n    \"cashLimit\": 1,\r\n    \"cashLimitCurrency\": \"kzt\",\r\n    \"useWish\": false,\r\n    \"useCircleDraw\": null,\r\n    \"isInviteAfterDraw\": null,\r\n    \"isArchived\": null,\r\n    \"createAdminCard\": null,\r\n    \"isCreated\": true,\r\n    \"useNames\": false,\r\n    \"isPhoneRequired\": true,\r\n    \"logo\": null\r\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box"
					]
				}
			},
			"response": []
		},
		{
			"name": "delete box 3",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\",() => {\r",
							"    pm.response.to.have.status(200);\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "DELETE",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{url}}/api/box/{{key}}",
					"host": [
						"{{url}}"
					],
					"path": [
						"api",
						"box",
						"{{key}}"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "key",
			"value": ""
		},
		{
			"key": "inviteKey",
			"value": ""
		},
		{
			"key": "picture",
			"value": ""
		},
		{
			"key": "boxName",
			"value": ""
		},
		{
			"key": "allAvailableBox",
			"value": ""
		},
		{
			"key": "boxName1",
			"value": ""
		}
	]
}